享元模式--结构型

提供了减少对象数量从而改善应用所需的对象结构的方式
运用共享技术有效地支持大量细粒度的对象

>>>适用场景
1.常用于系统低层的开发，以便解决系统的性能问题
如：jdk中的String，有直接返回；没有则创建，并放到StringPool中
2.系统有大量相似对象、需要缓冲池的场景
数据库连接池，需要直接用，不用就放回


>>>优点
1.减少对象的创建，降低内存中对象的数量，降低系统内存，提高效率
2.减少内存之外的其他资源占用
3.服务端减少接口调用，客户端减少内存的占用

>>>缺点
1.关注内/外部状态、关注线程安全问题
2.使系统、程序的逻辑复杂化
在一些复杂的业务处理场景，很不不容易区分出内部和外部状态，就像我们活动信息部分与库存变化部分。如果不能很好的拆分，就会把享元工厂设计的非常混乱，难以维护。

>>>内部状态(不变)/外部状态(变化)
内部：享元对象内部，不会随着环境改变而改变
外部：随着环境改变而改变--不可共享状态

>>>
在享元模式的实现中需要使用到享元工厂来进行管理部分独立的对象和共享的对象，避免出现线程安全的问题；
享元模式的思想是减少内存的使用，提升效率，与我们之前使用的原型模式通过克隆对象的方式生成复杂对象，减少rpc的调用，是一类思想

>>>享元模式和原型模式
原型模式：创建一些复杂对象（如合成一张试卷），通过克隆的方式减少对象创建，节省内存
享元模式：将一个对象中的属性分为内部和外部两部分，内部对象提前创建好放到内存中（一个容器），外部变化的部分动态获取，最终将内部和外部属性进行组装


